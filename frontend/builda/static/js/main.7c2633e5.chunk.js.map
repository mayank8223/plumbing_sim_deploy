{"version":3,"sources":["logo.svg","colors.js","config/index.js","WebSocket.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Colors","WebSocketService","callbacks","this","socketRef","instance","path","config","WebSocket","onmessage","e","console","log","socketNewMessage","data","onopen","onerror","message","onclose","connect","parsedData","JSON","parse","command","Object","keys","length","username","sendMessage","i","j","direction","gameCallback","send","stringify","err","readyState","callback","socket","recursion","waitForSocketConnection","setTimeout","WebSocketInstance","getInstance","LoginComponent","props","usernameChangeHandler","event","window","location","origin","replace","setState","target","value","state","className","onSubmit","handleLogin","type","onChange","placeholder","required","React","Component","Block","style","backgroundColor","color","onClick","Grid","grid","x","y","n","row","push","renderBlock","renderRow","size","renderGrid","Direction","text","Blank","Controls","renderBlank","renderDirection","Reset","App","preventDefault","loggedIn","initUser","addCallbacks","gameUpdate","bind","Array","fill","col","component","directionClick","blockClick","reset","handleBlockClick","handleDirectionClick","handleReset","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7c2633e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","let Colors = []\nColors[\"blank\"] = \"white\"\nColors[\"active\"] = \"blue\"\nColors[\"pipe\"] = \"red\"\nColors[\"split\"] = \"black\"\n\nexport default Colors;","\nconst API_PATH = 'wss://secure-garden-92806.herokuapp.com/ws/sim'\n\nexport default {\n    API_PATH\n};","import config from './config';\n\nclass WebSocketService{\n\tstatic instance = null;\n\tcallbacks = {};\n\n\tstatic getInstance(){\n        if (!WebSocketService.instance){\n            WebSocketService.instance = new WebSocketService();\n        }\n        return WebSocketService.instance;\n    }\n\n    constructor(){\n        this.socketRef = null;\n    }\n\n    connect(){\n        const path = config.API_PATH;\n        this.socketRef = new WebSocket(path);\n        \n        this.socketRef.onmessage = e => {\n        \tconsole.log('Received')\n            this.socketNewMessage(e.data);\n          };\n\n        this.socketRef.onopen = () => {\n            console.log(\"WebSocket open\");\n        };\n        \n        this.socketRef.onerror = e => {\n            console.log(e.message);\n        };\n\n        this.socketRef.onclose = () => {\n            console.log(\"WebSocket closed, restarting..\");\n            this.connect();\n        };   \n    }\n\n    socketNewMessage(data){\n        const parsedData = JSON.parse(data);\n        const command = parsedData.command;\n        if(Object.keys(this.callbacks).length === 0){\n            return;\n        }\n        if(command === 'game'){\n        \tconsole.log('game received')\n            this.callbacks[command](parsedData);\n        }\n        if(command === 'new_message'){\n            console.log(\"okay so this was called\")\n            this.callbacks[command](parsedData.message);\n        }\n    }\n\n    initUser(username){\n    \tthis.sendMessage({command : 'init', username : username})\n    }\n\n    reset(username){\n    \tthis.sendMessage({command: 'reset', username: username})\n    }\n\n    blockClick(username,i,j){\n    \tthis.sendMessage({command: 'block_click', username: username, i:i, j:j})\n    }\n\n    directionClick(username,direction){\n    \tthis.sendMessage({command: 'direction_click', username: username, direction:direction })\n    }\n    addCallbacks(gameCallback){\n        this.callbacks['game'] = gameCallback;\n    }\n\n    sendMessage(data){\n        try{\n        \tconsole.log('tried');\n            console.log({...data})\n            this.socketRef.send(JSON.stringify({...data}))\n        }\n        catch(err){\n            console.log(err.message);\n        }\n    }\n     state(){\n        return this.socketRef.readyState;\n    }\n\n\n    waitForSocketConnection(callback){\n        const socket = this.socketRef;\n        const recursion = this.waitForSocketConnection;\n        setTimeout(\n            function(){\n                if(socket.readyState === 1){\n                    console.log(\"Connection is made\");\n                    if(callback != null){\n                        callback();\n                    }\n                    return;\n                }\n                else{\n                    console.log(\"Wait for connection..\");\n                    recursion(callback);\n                }\n            }, 1);\n    }\n\n}\n\nlet WebSocketInstance = WebSocketService.getInstance();\n\nexport default WebSocketInstance;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Colors from './colors';\nimport WebSocketInstance from './WebSocket';\n\nclass LoginComponent extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      username : ''\n    }\n\n  }\n\n  usernameChangeHandler = (event) => {\n    console.log(window.location.origin.replace(/^http/,'ws')+'/ws/sim')\n    this.setState({\n      username: event.target.value\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"login\">\n        <form onSubmit={(e) => this.props.handleLogin(e, this.state.username)}>\n          <input \n            type=\"text\"\n            onChange = {this.usernameChangeHandler}\n            value = {this.state.username}\n            placeholder = \"username\"\n            required \n          />\n          <button className=\"submit\" type=\"submit\">\n            Let's Go\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n\n}\n\nfunction Block(props){\n  return (\n    <button className=\"square\" style={{backgroundColor:props.color}} onClick={props.onClick}>\n    </button>\n  )\n}\n\nclass Grid extends React.Component{\n\n  renderBlock(i,j){\n    let color = Colors[this.props.grid[i][j]]\n    return <Block\n      x={i}\n      y={j}\n      color={color}\n      onClick={() => this.props.onClick(i,j)}\n    />\n  }\n\n  renderRow(i,n){\n    let row = []\n    for(let j = 0; j<n; j++){\n      row.push(this.renderBlock(i,j));\n    }\n    return row;\n  }\n\n  renderGrid(n){\n    let grid = []\n    for(let i=0; i<n; i++){\n      grid.push(<div className=\"board-row\">{this.renderRow(i,n)}</div>);\n    }\n    return grid;\n  }\n\n  render(){\n    const n = this.props.size;\n    return(\n      <div>\n        {this.renderGrid(n)}\n      </div>\n    )\n  }\n}\n\nfunction Direction(props){\n  return(\n    <button className=\"direction\" onClick={props.onClick}>\n      {props.text}\n    </button>\n  )\n}\n\nfunction Blank(props){\n  return(\n    <button className=\"blank\">\n    </button>\n  )\n}\n\n\n\nclass Controls extends React.Component{\n\n  renderDirection(text){\n    return <Direction\n      text={text}\n      onClick={() => this.props.onClick(text)}\n    />;\n  }\n  renderBlank(){\n    return <Blank />;\n  }\n\n  render() {\n    return(\n      <div>\n        <div className=\"board-row\">\n          {this.renderBlank()}\n          {this.renderDirection(\"U\")}\n          {this.renderBlank()}\n        </div>\n        <div className=\"board-row\">\n          {this.renderDirection(\"L\")}\n          {this.renderBlank()}\n          {this.renderDirection(\"R\")}\n        </div>\n        <div className=\"board-row\">\n          {this.renderBlank()}\n          {this.renderDirection(\"D\")}\n          {this.renderBlank()}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction Reset(props){\n  return(\n    <button className=\"reset\" onClick={props.onClick}>\n      Reset\n    </button>\n  )\n}\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    let size = 10\n    let grid = []\n    let row = size-1\n    let col = 0\n    for(let i=0;i<size;i++){\n      let row = Array(size).fill(\"blank\")\n      grid.push(row)\n    }\n    grid[row][col] = \"active\"\n    this.state = {\n      size:size,\n      grid: grid,\n      row: row,\n      col: col,\n      username: '',\n      loggedIn: false\n    };\n   \n  }\n    waitForSocketConnection(callback) {\n        const component = this;\n        setTimeout(\n            function(){\n                if(WebSocketInstance.state() === 1){\n                    console.log('Connection is made');\n                    callback()\n                    return;\n                }\n                else{\n                    console.log(\"Waiting for connection..\");\n                    component.waitForSocketConnection(callback);\n                }\n            }, 100);\n    }\n\n  handleDirectionClick(direction) {\n    let username = this.state.username\n    WebSocketInstance.directionClick(username,direction)\n    /*let row = this.state.row;\n    let col = this.state.col;\n    let size = this.state.size;\n    let grid = this.state.grid;\n    if(direction==\"U\"){\n      let destRow = row-3;\n      let valid = false;\n      if(destRow>=0){\n        if(grid[row-1][col]==\"blank\"&&grid[row-2][col]==\"blank\"&&grid[row-3][col]==\"blank\"){\n          valid = true;\n        }\n      }\n      if(valid){\n        grid[row][col] = \"split\";\n        grid[row-1][col] = \"pipe\";\n        grid[row-2][col] = \"pipe\";\n        grid[row-3][col] = \"active\";\n        row = destRow;\n        this.setState({\n          grid:grid,\n          row:row,\n        }) \n      }\n         \n    }\n    else if(direction==\"D\"){\n      let destRow = row+3;\n      let valid = false;\n      if(destRow<size){\n        if(grid[row+1][col]==\"blank\"&&grid[row+2][col]==\"blank\"&&grid[row+3][col]==\"blank\"){\n          valid = true;\n        }\n      }\n      if(valid){\n        grid[row][col] = \"split\";\n        grid[row+1][col] = \"pipe\";\n        grid[row+2][col] = \"pipe\";\n        grid[row+3][col] = \"active\";\n        row = destRow;\n        this.setState({\n          grid:grid,\n          row:row,\n        }) \n      }\n\n    }\n    else if(direction==\"R\"){\n      let destCol = col+3;\n      let valid = false;\n      if(destCol<size){\n        if(grid[row][col+1]==\"blank\"&&grid[row][col+2]==\"blank\"&&grid[row][col+3]==\"blank\"){\n          valid = true;\n        }\n      }\n      if(valid){\n        grid[row][col] = \"split\";\n        grid[row][col+1] = \"pipe\";\n        grid[row][col+2] = \"pipe\";\n        grid[row][col+3] = \"active\";\n        col = destCol;\n        this.setState({\n          grid:grid,\n          col:col,\n        }) \n      }\n    }\n    else{\n      let destCol = col-3;\n      let valid = false;\n      if(destCol>=0){\n        if(grid[row][col-1]==\"blank\"&&grid[row][col-2]==\"blank\"&&grid[row][col-3]==\"blank\"){\n          valid = true;\n        }\n      }\n      if(valid){\n        grid[row][col] = \"split\";\n        grid[row][col-1] = \"pipe\";\n        grid[row][col-2] = \"pipe\";\n        grid[row][col-3] = \"active\";\n        col = destCol;\n        this.setState({\n          grid:grid,\n          col:col,\n        }) \n      }\n\n    }*/\n  }\n\n  handleBlockClick(i,j){\n    let username = this.state.username\n    WebSocketInstance.blockClick(username,i,j)\n    /*let grid = this.state.grid;\n    let row = this.state.row;\n    let col = this.state.col;\n    if(grid[i][j]==\"split\"){\n      grid[i][j] = \"active\";\n      grid[row][col] = \"split\";\n      row = i;\n      col = j;\n      this.setState({\n        grid: grid,\n        row: row,\n        col: col,\n      })\n    }*/\n  }\n\n  handleReset(){\n    console.log(\"reset\")\n    WebSocketInstance.reset(this.state.username)\n    /*let grid = this.state.grid;\n    let size = this.state.size;\n    let row = size-1;\n    let col = 0;\n    for(let i=0;i<size;i++){\n      for(let j=0;j<size;j++){\n        grid[i][j] = \"blank\";\n      }\n    }\n    grid[row][col] = \"active\";\n    this.setState({\n      grid: grid,\n      row: row,\n      col: col,\n    })*/\n  }\n\n  handleLogin = (e,username) => {\n    e.preventDefault();\n    this.setState({\n      loggedIn: true,\n      username: username\n    })\n\n    WebSocketInstance.connect();\n    this.waitForSocketConnection(() => { \n      WebSocketInstance.initUser(username);\n      WebSocketInstance.addCallbacks(this.gameUpdate.bind(this))\n    });\n  }\n\n  gameUpdate(parsedData){\n    console.log('update')\n    const grid = parsedData['grid']\n    const row = parsedData['row']\n    const col = parsedData['col']\n    const size = parsedData['size']\n    this.setState({\n      grid: grid,\n      row: row,\n      col: col\n    })\n    \n  }\n\n  render() {\n    const size = this.state.size\n    const grid = this.state.grid\n    const loggedIn = this.state.loggedIn\n    return(\n       loggedIn ?\n      <div>\n        <Grid \n          size={size}\n          grid={grid}\n          onClick = {(i,j) => this.handleBlockClick(i,j)}\n        />\n        <Controls\n          onClick = {(direction) => this.handleDirectionClick(direction)}\n        />\n        <Reset\n          onClick = {() => this.handleReset()}\n        />\n      </div>\n      :\n      <LoginComponent\n        handleLogin = {this.handleLogin} />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}